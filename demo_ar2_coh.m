function demo_ar2_coh()

%Demonstrates flow of computation and generates figures for power, coherece
%and lagged coherence using simulated data corrupted with 60 cycle noise.
%Hard coded for a particular simulation stored in 'ar_2_model.mat'
%
%Model details:
%   Output of an AR(2) model with phi1 = 0.55 and phi2 = -0.81. 10 channels
%   consisting of 100 epochs of 2 second duration for each channel.
%   Simulated sampling rate is 200 Hz and model parameters were chosen to
%   return a peak at 40 Hz with a pole modulus (impulse response decay
%   multiplier) of 0.9.
%
%   Couling arrangement (in row to column driver-receiver): 
% 
%   [1 2; 1 6; 5 9; 7 10] 
%   
%   For all driver/receiver pairs the coupling strength is 0.5 and the
%   lag is 1/200 sec, corresponding to a single time index. Identical 60 Hz
%   sine noise was added to each channel.
%
%Analysis details:
%   Single trial spectra for all analyses are generated by premultiplying
%   the time series by 4 orthogonal tapers (multitaper method with NW =
%   5/2) and Fourier transforming the tapered sets. Spectral density
%   matrices are then obtained by averaging the outer products of channel
%   vectors for each frequency over trials and tapers. Measures of interest
%   are obtained by plugging these matrices, or their elements, into the
%   relevant definitions.
%
%   Flow of computation:
%       1) Load data 
%       2) Get core analysis ingredients from sig_to_spectrum
%       3) Convert trial spectra to density matrices with spectrum_to_sdm
%       4) Call measure functions to get power, coherence, and lagged
%       coherence 
%       

%% get data, analysis parameters, and tapers
load('ar_2_model.mat','data');
addpath('./spectral_analysis')
addpath('./connectivity_measures/')

%set sampling rate and get taper
fs = 200;
n_times = size(data,1);
taper = get_taper(n_times,'dpss','NW',5/2);

%% get spectral densities, power, and connectivity
%get single-trial coherence for full data set
[s_tr, bw_factor, frq_ax] = sig_to_spectrum(data,fs,taper);
%convert trial spectra to matricial densities
[s] = spectrum_to_sdm(s_tr,bw_factor);

%get psds
[psd] = sdm_to_pow(s);

%get coherence, univariate lc, and multivariate lc
[coh] = sdm_to_coh(s,0);
[lag_coh_u, ~] = sdm_to_lag_coh_uvar(s);


%% plot results
%plot power
for chan_ind = 1:10
    subplot(2,5,chan_ind)
    semilogy(frq_ax,(psd(chan_ind,:)))
    xlim([0,100])
    ylim([10e-4,10])
    set(gca,'Yscale','Log')
    if ismember(chan_ind,[1,6])
        %label y axis on left most
        ylabel('Unit^2/Hz')
    end
    if ismember(chan_ind,6:10)
        %xlabel on lower most plots
        xlabel('Frequency (Hz)')
    end
    title(['Channel ',num2str(chan_ind)])
    set(gca,'FontSize',16)

end
sgtitle('Power Spectral Densities for AR(2) 10 Channel Model','FontSize',20)
set(gcf,'Position',[400,400,2000,1000])

%plot coherence
figure
k = 1;
for driver_ind = 1:10
    for receiver_ind = 1:10
        subplot(10,10,k)
        plot(frq_ax,squeeze(coh(driver_ind,receiver_ind,:)))
        xlim([0,100])
        if ismember(k,1:10:100)
            ylabel(['Channel ',num2str(driver_ind)],'FontWeight','bold')
        end
        if ismember(k,90:100)
            xlabel('Frequency (Hz)')
        end
        if ismember(k,1:10)
            title(['Channel ',num2str(receiver_ind)])
        end
        k = k+1;
        ylim([0,1])
        set(gca,'FontSize',16)
    end
end
sgtitle('Coherence Spectra for AR(2) 10 Channel Model','FontSize',20)
set(gcf,'Position',[250,1,2000,2000])

%plot uvar lagged coherence
figure
k = 1;
for driver_ind = 1:10
    for receiver_ind = 1:10
        subplot(10,10,k)
        plot(frq_ax,squeeze(lag_coh_u(driver_ind,receiver_ind,:)))
        xlim([0,100])
        if ismember(k,1:10:100)
            ylabel(['Channel ',num2str(driver_ind)],'FontWeight','bold')
        end
        if ismember(k,90:100)
            xlabel('Frequency (Hz)')
        end
        if ismember(k,1:10)
            title(['Channel ',num2str(receiver_ind)])
        end
        k = k+1;
        ylim([0,1])
        set(gca,'FontSize',16)
    end
end
sgtitle('Lagged Coherence Spectra for AR(2) 10 Channel Model','FontSize',20)
set(gcf,'Position',[250,1,2000,2000])
